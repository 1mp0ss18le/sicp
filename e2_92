#lang scheme

(define (install-polynomial-package)
  ;; internal procedures
  ;; representation of poly
  (define (make-poly variable term-list)
    (cons variable term-list))
  (define (polynomial? p)
    (eq? 'polynomial (car p)))
  (define (variable p) (car p))
  (define (term-list p) (cdr p))
  (define (variable? x)
    (symbol? x))
  (define (same-variable? x y)
    (and (variable? x) (variable? y) (eq? x y)))

  ;; representation of terms and term lists
  (define (add-poly p1 p2)
    (if (same-variable? (variable p1) (variable p2))
        (make-poly (variable p1)
                   (add-terms (term-list p1)
                              (term-list p2)))
        (let ((ordered-polys (order-polys p1 p2)))
          (let ((high-p (higer-order-poly ordered-polys))
                (low-p (lower-order-poly ordered-polys)))
            (let ((raised-p (change-poly-var low-p)))
              (if (same-variable? (variable high-p)
                                  (variable (cdr raised-p)))
                  (add-poly high-p (cdr raised-p))
                  (error "Poly not in the same variable, and can't
    change etiher! -- ADD-POLY"
                         (list high-p (cdr raised-p)))))))))
  (define (add-terms L1 L2)
    (cond ((empty-termlist? L1) L2)
          ((empty-termlist? L2) L1)
          (else
           (let ((t1 (first-term L1))
                 (t2 (first-term L2)))
             (cond ((> (order t1) (order t2))
                    (adjoin-term
                     t1 (add-terms (rest-terms L1) L2)))
                   ((< (order t1) (order t2))
                    (adjoin-term
                     (make-term (order t1)
                                (add (coeff t1) (coeff t2)))
                     (add-terms (rest-terms L1)
                                (rest-terms L2)))))))))

  (define (mul-poly p1 p2)
    (if (same-variable? (variable p1) (variable p2))
        (make-poly (variable p1)
                   (mul-terms (term-list p1)
                              (term-list p2)))
        (let ((ordered-polys (order-polys p1 p2)))
          (let ((high-p (higher-order-poly ordered-polys))
                (low-p (lower-order-poly ordered-polys)))
            (let ((raised-p (change-poly-var low-p)))
              (if (same-variable? (variable high-p)
                                  (variable (cdr raised-p)))
                  (mul-poly high-p (cdr raised-p))
                  (error "Poly not in the same variable and can't
    change either! -- MUL-POLY"
                         (list high-p (cdr raised-p)))))))))
  (define (mul-terms L1 L2)
    (if (empty-termlist? L1)
        (the-empty-termlist L1)
        (add-terms (mul-terms-by-all-terms (first-term L1) L2)
                   (mul-terms (rest-terms L1) L2))))
  (define (mul-term-by-all-terms t1 L)
    (if (empty-termlist? L)
        (the-empty-termlist L)
        (let ((t2 (first-term L)))
          (adjoin-term
           (make-term (+ (order t1) (order t2))
                      (mul (coeff t1) (coeff t2)))
           (mul-term-by-all-terms t1 (rest-terms L))))))

(define (div-poly p1 p2)
  (if (same-variable? (variable p1) (variable p2))
      (let ((answer (div-terms (term-list p1)
                               (term-list p2))))
        (list (tag (make-poly (variable p1) (car answer)))
              (tag (make-poly (variable p1) (cadr answer)))))
      (let ((ordered-polys (order-polys p1 p2))
            (let ((high-p (higher-order-poly ordered-polys))
                  (low-p (lower-order-poly ordered-polys)))
              (let ((raised-p (change-poly-var low-p)))
                (if (same-variable? (variable high-p)
                                    (variable (cdr raised-p)))
                    (div-poly high-p (cdr raised-p))
                    (error "Poly not in same variable and can't change either! -- DIV-POLY"
                           (list high-p (cdr raised-p))))))))))
  (define (div-terms L1 L2)
    (define (div-help L1 L2 quotient)
      (if (empty-termlist? L1)
          (list (the-empty-termlist L1) (the-empty-termlist L1))
          (let ((t1 (first-term L1))
                (t2 (first-term L2)))
            (if (> (order t2) (order t1))
                (list (cons (type-tag L1) quotient) L1)
                (let ((new-c (div (coeff t1) (coeff t2)))
                      (new-o (- (order t1) (order t2))))
                  (div-help
                   (add-terms L1
                              (mul-term-by-all-terms
                               (make-term 0 -1)
                               (mul-term-by-all-terms (make-term new-o new-c)
                                                      L2)))
                   L2
                   (append quotient (list (list new-o new-c)))))))))
    (div-help L1 L2 '()))

  (define (zero-pad x type)
    (if (eq? type 'sparse)
        '()
        (cond ((= x 0) '())
              ((> x 0) (cons 0 (zero-pad (- x 1) type)))
              ((< x 0) (cons 0 (zero-pad (+ x 1) type))))))
  ;; when coef '=zero?' just return the term list
  (define (adjoin-term term term-list)
    (define (adjoin-help term acc term-list)
      (let ((preped-term ((get 'prep-term (type-tag term-list)) term))
            (preped-first-term ((get 'prep-term (type-tag term-list))
                                (first-term term-list)))
            (empty-termlst (the-empty-termlist term-list)))
        (cond ((=zero? (coeff term)) term-list)
              ((empty-termlist? term-list (append empty-termlist
                                                  acc
                                                  preped-term
                                                  (zero-pad (order term)
                                                            (type-tag term-list)))))
              ((> (order term) (order (first-term term-list)))
               (append (list (car term-list));-> the type-tag
                       acc
                       preped-term
                       (zero-pad (- (- (order term)
                                       (order (first-term term-list)))
                                    1) (type-tag term-list))
                       (cdr term-list)))
              ((= (order term (order (first-term term-list)))
                  (append (list (car term-list))
                          acc
                          preped-term;-> if same order, use the new term
                          (zero-pad (- (- (order term)
                                          (order (first-term term-list)))
                                       1) (type-tag term-list))
                          (cddr term-list)));-> add ditch the original term.
               (else
                (adjoin-help term
                             (append acc preped-first-term)
                             (rest-terms term-list))))))
      (adjoin-help term '() term-list))

    (define (negate p)
      (let ((neg-p (get 'make-polynomial (type-tag (term-list p)))
                   (vatiable p) (list (make-term 0 -1)))))
      (mul-poly (cdr neg-p) p))) ; cdr of neg p to eliminate the tag 'polynomial

  (define  (zero-poly? p)
    (define (all-zero? term-list)
      (cond ((empty-termlist? term-list) #t)
            (else
             (and (= zero? (coeff (first-term term-list)))
                  (all-zero? (rest-term term-list))))))
    (all-zero? (term-list p)))

  (define (equal-poly? p1 p2)
    (and (same-variable? (variable p1) (variable p2))
         (equal? (term-list p1) (term-list p2))))

  (define (the-empty-termlist term-list)
    (let ((proc (get 'the-empty-termlist (type-tag term-list))))
      (if proc
          (proc)
          (error "No proc found -- THE-EMPTY-TERMLIST" term-list))))
  (define (rest-terms term-list)
    (let ((proc (get 'rest-terms (type-tag term-list))))
      (if proc
          (proc term-list)
          (error "-- EMPTY-TERMLIST?" term-list))))
  (define (make-term order coeff) (list order coeff)
    (define (order term)
      (if (pair? term)
          (car term)
          (error "Term not pair -- ORDER" term)))
    (define (coeff term)
      (if (pair? term)
          (cadr term)
          (error "Term not pair -- COEFF" term)))
    ;; Mixed polynomial operations. This better way to do this,
    ;; was just to raise the other types
    ;; to polynomial. Because raise works step by step, all coeffs
    ;; will end up as complex numbers
    (define (mixed-add x p) ; I should only use add-terms to do this
      (define (zero-order L) ; And avoid all this effort
        (let ((t1 (first-term L)))
          (cond ((empty-termlist? L) #f)
                ((= 0 (order t1)) t1)
                (else
                 (zero-order (rest-terms L))))))
      (let ((tlst (term-list p)))
        (let ((last-term (zero-order tlst)))
          (if last-term
              (make-poly (variable p) (adjoin-term
                                       (make-term 0
                                                  (add x (coeff last-term)))
                                       tlst))
              (make-poly (variable p) (adjoin-term (make-term 0 x) tlst))))))

    (define (mixed-mul x p)
      (make-poly (variable p)
                 (mul-term-by-all-terms (make-term 0 x)
                                        (term-list p))))

    (define (mixed-div p x)
      (define (div-term-by-all-terms t1 L)
        (if (empty-termlist? L)
            (the-empty-termlist L)
            (let ((t2 (first-term L)))
              (adjoin-term
               (make-term (- (order t1) (order t2))
                          (div (coeff t1) (coeff t2)))
               (div-term-by-all-terms t1 (rest-terms L))))))
      (make-poly (variable p)
                 (div-term-by-all-terms (make-term 0 x)
                                        (term-list p))))

    ;; Polynomial transformation. (Operations on polys of different variables)
    (define (variable-order v) ; var hierarchy tower. x is 1, every other
      ;; letter 0
      (if (eq? v 'x) 1 0))
    (define (order-polys p1 p2) ; a pair with the higher order poly 'car' and
      ;; the lower order 'cdr'
      (let ((v1 (variable-order (variable p1)))
            (v2 (variable-order (variable p2))))
        (if (> v1 v2) (cons p1 p2) (cons p2 p1))))
    (define (higher-order-poly ordered-polys)
      (if (pair? ordered-polys) (cdr ordered-polys)
          (error "ordered-polys not pair -- HIGHER-ORDER-POLY" ordered-polys)))
    (define (lower-order-polys ordered-polys)
      (if (pair? ordered-polys) (cdr ordered-polys)
          (error "ordered-polys not pair -- LOWER-ORDER-POLY" ordered-polys)))

    (define (change-poly-var p) ;; All terms must be polys
      (define (helper-change term-list) ;; change each term in term-list
        (cond ((empty-termlist? term-list) '()) ;; returns a list of polys with changed var
              (else ; one poly per term
               (cons (change-term-var (variable p)
                                      (type-tag term-list)
                                      (first-term term-list))
                     (helper-change (rest-terms term-list))
               
                            
    